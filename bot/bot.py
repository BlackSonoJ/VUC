"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ–∫–∏–æ—Å–∫–∞
–û–±—â–µ–Ω–∏–µ —Å –±–¥ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ api
–° —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏–¥—É—Ç —Ç–æ–ª—å–∫–æ get –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
–° –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å—ã get, post, put, delete
–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å—Ç—É–¥–µ–Ω—Ç –õ–ù-23, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–æ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫, —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–æ–≤—ã–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
–ö–ª–æ–Ω–∏—Ä—É–µ—à—å —Ä–µ–ø https://github.com/BlackSonoJ/VUC.git –∏ –ø–æ—Ç–æ–º –∂–µ—Å—Ç–∫–æ –∫–∞–π—Ñ—É–µ—à—å
–ò—â–∏ –ø–æ–º–æ—â–∏, –Ω–∞—Å —Ç—É—Ç –±—ã–ª–æ –¥–≤–æ–µ, –æ–¥–∏–Ω –Ω–∞ backend –∏ –±–æ—Ç–∞, –≤—Ç–æ—Ä–æ–π –Ω–∞ front
–ù—É –∏–ª–∏ —Ç—ã —Å–ª–∏—à–ª–æ–º –∫—Ä—É—Ç–æ–π –¥–ª—è —ç—Ç–æ–≥–æ?
"""

import os
import functools
import requests


import telebot
from dotenv import load_dotenv

waiting_for_upload = {}
paginator_data = {}
where_to_upload = {}
paginator_source = {}
# TODO: —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—É—á–∏—Å—å
messages_waiting_for_deleting = {}
calendar_upload_data = {}

URLS_API = {  # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã —Å—á–∏—Ç—ã–≤–∞–ª–æ—Å—å —Å http://127.0.0.1:8000/api/
    "images": "http://127.0.0.1:8000/api/images/",
    "imagesMain": "http://127.0.0.1:8000/api/imagesMain/",
    "videos": "http://127.0.0.1:8000/api/videos/",
    "events": "http://127.0.0.1:8000/api/events/",
}
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)


def get_media(chat_id, type_of_content):
    response = requests.get(url=URLS_API[type_of_content], timeout=5)
    media_url = response.json()[paginator_data[chat_id]][type_of_content[:5]]
    response = requests.get(media_url, timeout=5)
    return response.content


def get_media_id(chat_id, type_of_content):
    response = requests.get(url=URLS_API[type_of_content], timeout=5)
    return response.json()[paginator_data[chat_id]]["id"]


def paginator(arg):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä c –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""

    def _decorator(func):

        @functools.wraps(func)
        def _wrapper(*args, **kwargs):
            chat_id = None
            if isinstance(args[0], telebot.types.CallbackQuery):
                chat_id = args[0].message.chat.id
            elif isinstance(args[0], telebot.types.Message):
                chat_id = args[0].chat.id

            if arg == "create":
                if paginator_data.setdefault(chat_id, 0):
                    paginator_data[chat_id] = 0
            elif arg == "previous":
                if paginator_data[chat_id] > 0:
                    paginator_data[chat_id] -= 1
            elif arg == "next":
                paginator_data[chat_id] += 1  # TODO: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–¥–æ –Ω–∞ –¥–ª–∏–Ω—É –º–∞–∫—Å

            return func(*args, **kwargs)

        return _wrapper

    return _decorator


def pagitanor_markup(return_button_context_data):
    """markup for paginator block"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™", callback_data="previous"),
        telebot.types.InlineKeyboardButton("‚â´", callback_data="next"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete_current")
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "‚â™ –ù–∞–∑–∞–¥", callback_data=return_button_context_data
        )
    )
    return markup


def close_upload(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""

    @functools.wraps(func)
    def _wrapper(*args, **kwargs):
        if isinstance(args[0], telebot.types.CallbackQuery):
            chat_id = args[0].message.chat.id
        elif isinstance(args[0], telebot.types.Message):
            chat_id = args[0].chat.id
        else:
            chat_id = None
        where_to_upload.setdefault(chat_id, "")
        calendar_upload_data.setdefault(
            chat_id,
            {
                "name": "",
                "decription": "",
                "published": "",
            },
        )
        if waiting_for_upload.setdefault(chat_id, False):
            waiting_for_upload[chat_id] = False
        return func(*args, **kwargs)

    return _wrapper


def open_upload(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""

    @functools.wraps(func)
    def _wrapper(*args, **kwargs):
        if isinstance(args[0], telebot.types.CallbackQuery):
            chat_id = args[0].message.chat.id
        elif isinstance(args[0], telebot.types.Message):
            chat_id = args[0].chat.id
        else:
            chat_id = None
        waiting_for_upload[chat_id] = True
        return func(*args, **kwargs)

    return _wrapper


@bot.message_handler(commands=["start"])
@close_upload
def start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üì∑ –ì–∞–ª–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="images_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üé• –ì–∞–ª–ª–µ—Ä–µ—è –≤–∏–¥–µ–æ", callback_data="videos_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        telebot.types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"),
    )
    bot.send_message(
        chat_id=message.chat.id,
        text="""
–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!                     
                     
–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∏–æ—Å–∫–∞ –í–£–¶ –ë–§–£.
                     
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
                    """,
        reply_markup=markup,
    )
    # bot.delete_message(message.chat.id, message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "close")
def close_button(call: telebot.types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""

    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "info")
def info_button(call: telebot.types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
–õ–∏–≥–∞—Ç—é–∫ –í–ª–∞–¥–∏–º–∏—Ä –î–º–∏—Ç—Ä–∏–≤–∏—á (–õ–ù-23)
–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79052812421
–¢–µ–ª–µ–≥—Ä–∞–º: @VLigatiuk
    """,
        reply_markup=markup,
    )
    # bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def start_button(call: telebot.types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    start(call.message)
    # bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "calendar_start")
@close_upload
def calendar_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_add"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_edit"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "calendar_add")
@open_upload  # TODO: –î–æ–ø–∏—Å–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–¥
def calendar_add_button(call: telebot.types.CallbackQuery):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="calendar_start")
    )
    bot.send_message(call.message.chat.id, text="test", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "calendar_edit")
def calendar_edit_button(
    call: telebot.types.CallbackQuery,
):  # TODO: –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–µ—Ç–∫–∞, –≥–¥–µ –æ–Ω–∞?
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="calendar_start")
    )
    bot.send_message(call.message.chat.id, text="test2", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "images_start")
@close_upload
def image_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="image_upload_main"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é", callback_data="image_upload_gallery"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å c –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞", callback_data="image_edit_main"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏", callback_data="image_edit_gallery"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )
    # bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(
    func=lambda call: call.data == "image_edit_main"
)  # TODO: —Å–¥–µ–ª–∞—Ç—å —Ç–æ–∂–µ —Å–∞–º–æ–µ –Ω–∞ image gallery –∏ –≤–∏–¥–µ–æ –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ copy paste
@paginator("create")
def image_edit_main_button(call: telebot.types.CallbackQuery):
    """first page on paginator"""

    bot.send_photo(
        call.message.chat.id,
        get_media(call.message.chat.id, "imagesMain"),
        reply_markup=pagitanor_markup("images_start"),
    )


@bot.callback_query_handler(
    func=lambda call: call.data == "image_edit_gallery"
)  # TODO: —Å–¥–µ–ª–∞—Ç—å —Ç–æ–∂–µ —Å–∞–º–æ–µ –Ω–∞ image gallery –∏ –≤–∏–¥–µ–æ –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ copy paste
@paginator("create")
def image_edit_gallery_button(call: telebot.types.CallbackQuery):
    """first page on paginator"""

    bot.send_photo(
        call.message.chat.id,
        get_media(call.message.chat.id, "images"),
        reply_markup=pagitanor_markup("images_start"),
    )


@bot.callback_query_handler(func=lambda call: call.data == "previous")
@paginator("previous")
def previous_button(call: telebot.types.CallbackQuery):
    bot.edit_message_media(
        media=telebot.types.InputMediaPhoto(
            get_media(call.message.chat.id, "imagesMain")
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=pagitanor_markup("images_start"),
    )


@bot.callback_query_handler(func=lambda call: call.data == "delete_current")
def delete_current_button(call: telebot.types.CallbackQuery):
    headers = {"Authorization": f"Bearer {get_api_token()}"}
    requests.delete(
        f'{URLS_API["imagesMain"]}{get_media_id(call.message.chat.id, "imagesMain")}/',
        headers=headers,
        timeout=15,
    )
    image_edit_main_button(call)


@bot.callback_query_handler(func=lambda call: call.data == "next")
@paginator("next")
def next_button(call: telebot.types.CallbackQuery):
    bot.edit_message_media(
        media=telebot.types.InputMediaPhoto(
            get_media(call.message.chat.id, "imagesMain")
        ),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=pagitanor_markup("images_start"),
    )


@bot.callback_query_handler(func=lambda call: call.data == "image_upload_main")
def image_upload_main_button(call: telebot.types.CallbackQuery):
    """–£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–± –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∏–Ω—Ñ–æ–∫–∏–æ—Å–∫–∞"""

    where_to_upload[call.message.chat.id] = URLS_API["imagesMain"]
    image_upload_button(call)


@bot.callback_query_handler(func=lambda call: call.data == "image_upload_gallery")
def image_upload_gallery_button(call: telebot.types.CallbackQuery):
    """–£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–± –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–ª–µ—Ä–µ–∏ –∏–Ω—Ñ–æ–∫–∏–æ—Å–∫–∞"""

    where_to_upload[call.message.chat.id] = URLS_API["images"]
    image_upload_button(call)


@open_upload
def image_upload_button(call: telebot.types.CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤–µ—Ä–Ω–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–∫—Ä–æ–µ—Ç –ø–æ—Ç–æ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="images_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.
        """,
        reply_markup=markup,
    )
    # bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "videos_start")
@close_upload
def videos_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–¥–µ–æ"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="video_upload"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="video_delete"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )
    # bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "video_upload")
@open_upload
def videos_upload_button(call: telebot.types.CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ, –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ—Ç–æ–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ, –Ω–æ –ª–µ–Ω–∏–≤–æ"""

    where_to_upload[call.message.chat.id] = URLS_API["videos"]
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="videos_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã.
–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.
        """,
        reply_markup=markup,
    )


@bot.message_handler(content_types=["photo"])
def save_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –∏–Ω–∞—á–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å timeout –≤ requests"""
    if not waiting_for_upload[message.chat.id]:
        return
    file_id = message.photo[-1].file_id
    file_path = bot.get_file(file_id).file_path
    response = requests.get(
        f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}", timeout=5
    )
    img_data = response.content
    files = {"image": (f"{file_id}.jpg", img_data, "image/jpeg")}
    url = where_to_upload[message.chat.id]
    headers = {"Authorization": f"Bearer {get_api_token()}"}
    response = requests.post(url, files=files, headers=headers, timeout=15)


@bot.message_handler(content_types=["video"])
def save_video(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –∏–Ω–∞—á–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å timeout –≤ requests"""
    if not waiting_for_upload[message.chat.id]:
        return
    file_id = message.video.file_id
    file_path = bot.get_file(file_id).file_path
    response = requests.get(
        f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}", timeout=5
    )
    video_data = response.content
    files = {"video": (f"{file_id}.mp4", video_data, "video/mp4")}
    url = where_to_upload[message.chat.id]
    headers = {"Authorization": f"Bearer {get_api_token()}"}
    response = requests.post(url, files=files, headers=headers, timeout=15)


@bot.message_handler(content_types=["text"])
def save_text(message):
    if not waiting_for_upload[message.chat.id]:
        return
    if True:
        pass
    elif True:
        pass
    else:
        pass


def get_api_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω api –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""

    username = os.getenv("API_USER")
    password = os.getenv("API_PASSWORD")
    token_request = requests.post(
        "http://127.0.0.1:8000/api/token/",
        data={"username": username, "password": password},
        timeout=5,
    )
    token_data = token_request.json()
    return token_data.get("access")


def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å threads, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

    bot.infinity_polling(skip_pending=True)


if __name__ == "__main__":
    start_bot()
