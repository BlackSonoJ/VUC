"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ–∫–∏–æ—Å–∫–∞
–û–±—â–µ–Ω–∏–µ —Å –±–¥ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ api
–° —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏–¥—É—Ç —Ç–æ–ª—å–∫–æ get –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
–° –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å—ã get, post, put, delete
–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å—Ç—É–¥–µ–Ω—Ç –õ–ù-23, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–æ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ–∫, —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω,
–Ω–æ–≤—ã–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
–ö–ª–æ–Ω–∏—Ä—É–µ—à—å —Ä–µ–ø https://github.com/BlackSonoJ/VUC.git –∏ –ø–æ—Ç–æ–º –∂–µ—Å—Ç–∫–æ –∫–∞–π—Ñ—É–µ—à—å
–ò—â–∏ –ø–æ–º–æ—â–∏, –Ω–∞—Å —Ç—É—Ç –±—ã–ª–æ –¥–≤–æ–µ, –æ–¥–∏–Ω –Ω–∞ backend –∏ –±–æ—Ç–∞, –≤—Ç–æ—Ä–æ–π –Ω–∞ front
–ù—É –∏–ª–∏ —Ç—ã —Å–ª–∏—à–ª–æ–º –∫—Ä—É—Ç–æ–π –¥–ª—è —ç—Ç–æ–≥–æ?
–≤–µ—Ä—Å–∏—è –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import requests


import telebot
from dotenv import load_dotenv

from uploader import Uploader
from paginator import Paginator


load_dotenv()


def content_type_urls():
    """–ü–æ–ª—É—á–∞–µ–º —Å API —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ URL"""
    return requests.get(os.getenv("API_URL"), timeout=5).json()


API_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)
API_URLS = content_type_urls()
uploader = Uploader(API_URLS)
paginator = Paginator(API_URLS)


@bot.message_handler(commands=["start"])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üì∑ –ì–∞–ª–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="images_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π", callback_data="imagesMain_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üé• –ì–∞–ª–ª–µ—Ä–µ—è –≤–∏–¥–µ–æ", callback_data="videos_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        telebot.types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"),
    )
    bot.send_message(
        chat_id=message.chat.id,
        text="""
–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!                     
                     
–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∏–æ—Å–∫–∞ –í–£–¶ –ë–§–£.
                     
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
                    """,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "close")
def close_button(call: telebot.types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""

    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "info")
def info_button(call: telebot.types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
–õ–∏–≥–∞—Ç—é–∫ –í–ª–∞–¥–∏–º–∏—Ä –î–º–∏—Ç—Ä–∏–≤–∏—á (–õ–ù-23)
–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79052812421
–¢–µ–ª–µ–≥—Ä–∞–º: @VLigatiuk
    """,
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def start_button(call: telebot.types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    start(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "images_start")
@uploader.close_upload
@uploader.add_content_type("images")
@paginator.add_content_type("images")
def image_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–∞–ª–µ—Ä–µ–µ–π"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é", callback_data="upload"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏", callback_data="edit"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "imagesMain_start")
@uploader.close_upload
@uploader.add_content_type("imagesMain")
@paginator.add_content_type("imagesMain")
def images_main_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="upload"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å c –≥–ª–∞–≤–Ω–æ–π", callback_data="edit"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "videos_start")
@uploader.close_upload
@uploader.add_content_type("videos")
@paginator.add_content_type("videos")
def videos_start_button(call: telebot.types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"""

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="upload"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="edit"
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "edit")
@paginator.paginator("create")
def image_edit_main_button(call: telebot.types.CallbackQuery):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    bot.send_photo(  # –ø–æ—á–µ–º—É-—Ç–æ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –≤–∏–¥–µ–æ, –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ
        call.message.chat.id,
        paginator.get_media_raw(call.message.chat.id),
        reply_markup=paginator.markup(call.message.chat.id, "start"),
    )


@bot.callback_query_handler(func=lambda call: call.data == "previous")
@paginator.paginator("previous")
def previous_button(call: telebot.types.CallbackQuery):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    bot.edit_message_media(
        media=paginator.get_media(call.message.chat.id),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=paginator.markup(
            call.message.chat.id,
            "start",
        ),
    )


@bot.callback_query_handler(func=lambda call: call.data == "next")
@paginator.paginator("next")
def next_button(call: telebot.types.CallbackQuery):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    bot.edit_message_media(
        media=paginator.get_media(call.message.chat.id),
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=paginator.markup(
            call.message.chat.id,
            "start",
        ),
    )


@bot.callback_query_handler(func=lambda call: call.data == "upload")
@uploader.open_upload
def upload(call: telebot.types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫"""
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª(—ã).
–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.
        """,
        reply_markup=uploader.markup(call.message.chat.id, "start"),
    )


@bot.message_handler(content_types=["video", "photo"])
def save_media(message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –∫–∞–∫ –±–æ–∂–µ–Ω—å–∫–∏"""
    if not uploader.status[message.chat.id]:
        return
    if uploader.content_type[message.chat.id][:5] == "image":
        file_id = message.photo[-1].file_id
        file_path = bot.get_file(file_id).file_path
        response = requests.get(
            f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}", timeout=5
        )
        img_data = response.content
        files = {"image": (f"{file_id}.jpg", img_data, "image/jpeg")}
    else:
        file_id = message.video.file_id
        file_path = bot.get_file(file_id).file_path
        response = requests.get(
            f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}", timeout=5
        )
        video_data = response.content
        files = {"video": (f"{file_id}.mp4", video_data, "video/mp4")}
    url = uploader.urls_api[uploader.content_type[message.chat.id]]
    headers = {"Authorization": f"Bearer {get_api_token()}"}
    response = requests.post(url, files=files, headers=headers, timeout=15)


def get_api_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω api –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""

    token_request = requests.post(
        f"{os.getenv("API_URL")}token/",
        data={"username": os.getenv("API_USER"), "password": os.getenv("API_PASSWORD")},
        timeout=5,
    )
    token_data = token_request.json()
    return token_data.get("access")


def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å threads, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

    bot.infinity_polling(skip_pending=True)


if __name__ == "__main__":
    start_bot()
