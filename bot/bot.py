import os
import datetime

import telebot
from dotenv import load_dotenv
import psycopg2

waiting_for_image_upload = {}
load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

db = psycopg2.connect(
    host=os.getenv("DB_HOST"),
    port=os.getenv("DB_PORT"),
    database=os.getenv("DB_NAME"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
)

"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è + –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
"""


@bot.message_handler(commands=["start"])
def start(message):
    close_upload(message)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–ì–∞–ª–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="images_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            "–ì–∞–ª–ª–µ—Ä–µ—è –≤–∏–¥–µ–æ", callback_data="video_start"
        )
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        telebot.types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"),
    )
    bot.send_message(
        chat_id=message.chat.id,
        text="""
–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!                     
                     
–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∏–æ—Å–∫–∞ –í–£–¶ –ë–§–£.
                     
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
                    """,
        reply_markup=markup,
    )
    bot.delete_message(message.chat.id, message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "close")
def close_button(call: telebot.types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "info")
def info_button(call: telebot.types.CallbackQuery):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""
–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
–õ–∏–≥–∞—Ç—é–∫ –í–ª–∞–¥–∏–º–∏—Ä –î–º–∏—Ç—Ä–∏–≤–∏—á (–õ–ù-23)
–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79052812421
–¢–µ–ª–µ–≥—Ä–∞–º: @VLigatiuk
    """,
        reply_markup=markup,
    )
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def start_button(call: telebot.types.CallbackQuery):
    start(call.message)
    bot.delete_message(call.message.chat.id, call.message.message_id)


"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""


@bot.callback_query_handler(func=lambda call: call.data == "images_start")
def image_start_button(call: telebot.types.CallbackQuery):
    close_upload(call.message)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="image_upload"),
        telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="image_delete"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "image_upload")
def image_upload_button(call: telebot.types.CallbackQuery):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="images_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text="""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º""",
        reply_markup=markup,
    )
    waiting_for_image_upload[call.message.chat.id] = True
    bot.delete_message(call.message.chat.id, call.message.message_id)


"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –≤–∏–¥–µ–æ
"""


@bot.callback_query_handler(func=lambda call: call.data == "videos_start")
def videos_start_button(call: telebot.types.CallbackQuery):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="video_upload"),
        telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="video_delete"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚â™ –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    bot.send_message(
        chat_id=call.message.chat.id, text="""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ""", reply_markup=markup
    )
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(content_types=["photo"])
def photo_id(message):
    if waiting_for_image_upload[message.chat.id]:
        waiting_for_image_upload[message.chat.id] = False
        # db.autocommit = True
        # with db.cursor() as cursor:
        #     for i in range(3, len(message.photo), 4):
        #         file_id = message.photo[i].file_id
        #         # cursor.execute(
        #         #     "INSERT INTO api_images (image_id, published) VALUES (%s, %s);",
        #         #     (
        #         #         file_id,
        #         #         datetime.datetime.now(),
        #         #     ),
        #         # )
        # # bot.send_message(message.chat.id, """–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ""")
        # # bot.delete_message(message.chat.id, message.message_id - 1)
        # start(message)


def close_upload(message):
    if waiting_for_image_upload.setdefault(message.chat.id, False):
        waiting_for_image_upload[message.chat.id] = False


def start_bot():
    bot.infinity_polling(skip_pending=True)


if __name__ == "__main__":
    start_bot()
